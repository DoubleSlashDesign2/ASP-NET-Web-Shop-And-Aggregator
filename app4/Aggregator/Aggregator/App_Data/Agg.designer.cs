#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace app0.App_Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DataSource")]
	public partial class AggDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
        
        /// <summary>
        /// Adds Linq To SQL Randomization functionality
        /// </summary>
        /// <returns></returns>
        [Function(Name = "NEWID", IsComposable = true)]
        public Guid Random()
        {
            throw new NotImplementedException();
        }
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAggCategory(AggCategory instance);
    partial void UpdateAggCategory(AggCategory instance);
    partial void DeleteAggCategory(AggCategory instance);
    partial void InsertAggProduct(AggProduct instance);
    partial void UpdateAggProduct(AggProduct instance);
    partial void DeleteAggProduct(AggProduct instance);
    partial void InsertAggImage(AggImage instance);
    partial void UpdateAggImage(AggImage instance);
    partial void DeleteAggImage(AggImage instance);
    partial void InsertAggManufacter(AggManufacter instance);
    partial void UpdateAggManufacter(AggManufacter instance);
    partial void DeleteAggManufacter(AggManufacter instance);
    #endregion
		
		public AggDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DataSourceConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AggDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AggDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AggDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AggDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AggCategory> AggCategories
		{
			get
			{
				return this.GetTable<AggCategory>();
			}
		}
		
		public System.Data.Linq.Table<AggProduct> AggProducts
		{
			get
			{
				return this.GetTable<AggProduct>();
			}
		}
		
		public System.Data.Linq.Table<AggImage> AggImages
		{
			get
			{
				return this.GetTable<AggImage>();
			}
		}
		
		public System.Data.Linq.Table<AggManufacter> AggManufacters
		{
			get
			{
				return this.GetTable<AggManufacter>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AggCategories")]
	public partial class AggCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _cat_id;
		
		private string _cat_name;
		
		private EntitySet<AggProduct> _AggProducts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncat_idChanging(int value);
    partial void Oncat_idChanged();
    partial void Oncat_nameChanging(string value);
    partial void Oncat_nameChanged();
    #endregion
		
		public AggCategory()
		{
			this._AggProducts = new EntitySet<AggProduct>(new Action<AggProduct>(this.attach_AggProducts), new Action<AggProduct>(this.detach_AggProducts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cat_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int cat_id
		{
			get
			{
				return this._cat_id;
			}
			set
			{
				if ((this._cat_id != value))
				{
					this.Oncat_idChanging(value);
					this.SendPropertyChanging();
					this._cat_id = value;
					this.SendPropertyChanged("cat_id");
					this.Oncat_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cat_name", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string cat_name
		{
			get
			{
				return this._cat_name;
			}
			set
			{
				if ((this._cat_name != value))
				{
					this.Oncat_nameChanging(value);
					this.SendPropertyChanging();
					this._cat_name = value;
					this.SendPropertyChanged("cat_name");
					this.Oncat_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AggCategory_AggProduct", Storage="_AggProducts", ThisKey="cat_id", OtherKey="cat_id")]
		public EntitySet<AggProduct> AggProducts
		{
			get
			{
				return this._AggProducts;
			}
			set
			{
				this._AggProducts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AggProducts(AggProduct entity)
		{
			this.SendPropertyChanging();
			entity.AggCategory = this;
		}
		
		private void detach_AggProducts(AggProduct entity)
		{
			this.SendPropertyChanging();
			entity.AggCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AggProducts")]
	public partial class AggProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _prod_id;
		
		private string _prod_name;
		
		private int _img_id;
		
		private System.Nullable<int> _cat_id;
		
		private System.Nullable<int> _man_id;
		
		private System.Nullable<int> _cp_id;
		
		private System.Nullable<int> _uth_id;
		
		private System.Nullable<int> _xh_id;
		
		private EntityRef<AggCategory> _AggCategory;
		
		private EntityRef<AggImage> _AggImage;
		
		private EntityRef<AggManufacter> _AggManufacter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onprod_idChanging(int value);
    partial void Onprod_idChanged();
    partial void Onprod_nameChanging(string value);
    partial void Onprod_nameChanged();
    partial void Onimg_idChanging(int value);
    partial void Onimg_idChanged();
    partial void Oncat_idChanging(System.Nullable<int> value);
    partial void Oncat_idChanged();
    partial void Onman_idChanging(System.Nullable<int> value);
    partial void Onman_idChanged();
    partial void Oncp_idChanging(System.Nullable<int> value);
    partial void Oncp_idChanged();
    partial void Onuth_idChanging(System.Nullable<int> value);
    partial void Onuth_idChanged();
    partial void Onxh_idChanging(System.Nullable<int> value);
    partial void Onxh_idChanged();
    #endregion
		
		public AggProduct()
		{
			this._AggCategory = default(EntityRef<AggCategory>);
			this._AggImage = default(EntityRef<AggImage>);
			this._AggManufacter = default(EntityRef<AggManufacter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_prod_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int prod_id
		{
			get
			{
				return this._prod_id;
			}
			set
			{
				if ((this._prod_id != value))
				{
					this.Onprod_idChanging(value);
					this.SendPropertyChanging();
					this._prod_id = value;
					this.SendPropertyChanged("prod_id");
					this.Onprod_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_prod_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string prod_name
		{
			get
			{
				return this._prod_name;
			}
			set
			{
				if ((this._prod_name != value))
				{
					this.Onprod_nameChanging(value);
					this.SendPropertyChanging();
					this._prod_name = value;
					this.SendPropertyChanged("prod_name");
					this.Onprod_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_img_id", DbType="Int NOT NULL")]
		public int img_id
		{
			get
			{
				return this._img_id;
			}
			set
			{
				if ((this._img_id != value))
				{
					if (this._AggImage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onimg_idChanging(value);
					this.SendPropertyChanging();
					this._img_id = value;
					this.SendPropertyChanged("img_id");
					this.Onimg_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cat_id", DbType="Int")]
		public System.Nullable<int> cat_id
		{
			get
			{
				return this._cat_id;
			}
			set
			{
				if ((this._cat_id != value))
				{
					if (this._AggCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncat_idChanging(value);
					this.SendPropertyChanging();
					this._cat_id = value;
					this.SendPropertyChanged("cat_id");
					this.Oncat_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_man_id", DbType="Int")]
		public System.Nullable<int> man_id
		{
			get
			{
				return this._man_id;
			}
			set
			{
				if ((this._man_id != value))
				{
					if (this._AggManufacter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onman_idChanging(value);
					this.SendPropertyChanging();
					this._man_id = value;
					this.SendPropertyChanged("man_id");
					this.Onman_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cp_id", DbType="Int")]
		public System.Nullable<int> cp_id
		{
			get
			{
				return this._cp_id;
			}
			set
			{
				if ((this._cp_id != value))
				{
					this.Oncp_idChanging(value);
					this.SendPropertyChanging();
					this._cp_id = value;
					this.SendPropertyChanged("cp_id");
					this.Oncp_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uth_id", DbType="Int")]
		public System.Nullable<int> uth_id
		{
			get
			{
				return this._uth_id;
			}
			set
			{
				if ((this._uth_id != value))
				{
					this.Onuth_idChanging(value);
					this.SendPropertyChanging();
					this._uth_id = value;
					this.SendPropertyChanged("uth_id");
					this.Onuth_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_xh_id", DbType="Int")]
		public System.Nullable<int> xh_id
		{
			get
			{
				return this._xh_id;
			}
			set
			{
				if ((this._xh_id != value))
				{
					this.Onxh_idChanging(value);
					this.SendPropertyChanging();
					this._xh_id = value;
					this.SendPropertyChanged("xh_id");
					this.Onxh_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AggCategory_AggProduct", Storage="_AggCategory", ThisKey="cat_id", OtherKey="cat_id", IsForeignKey=true)]
		public AggCategory AggCategory
		{
			get
			{
				return this._AggCategory.Entity;
			}
			set
			{
				AggCategory previousValue = this._AggCategory.Entity;
				if (((previousValue != value) 
							|| (this._AggCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AggCategory.Entity = null;
						previousValue.AggProducts.Remove(this);
					}
					this._AggCategory.Entity = value;
					if ((value != null))
					{
						value.AggProducts.Add(this);
						this._cat_id = value.cat_id;
					}
					else
					{
						this._cat_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("AggCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AggImage_AggProduct", Storage="_AggImage", ThisKey="img_id", OtherKey="img_id", IsForeignKey=true)]
		public AggImage AggImage
		{
			get
			{
				return this._AggImage.Entity;
			}
			set
			{
				AggImage previousValue = this._AggImage.Entity;
				if (((previousValue != value) 
							|| (this._AggImage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AggImage.Entity = null;
						previousValue.AggProducts.Remove(this);
					}
					this._AggImage.Entity = value;
					if ((value != null))
					{
						value.AggProducts.Add(this);
						this._img_id = value.img_id;
					}
					else
					{
						this._img_id = default(int);
					}
					this.SendPropertyChanged("AggImage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AggManufacter_AggProduct", Storage="_AggManufacter", ThisKey="man_id", OtherKey="man_id", IsForeignKey=true)]
		public AggManufacter AggManufacter
		{
			get
			{
				return this._AggManufacter.Entity;
			}
			set
			{
				AggManufacter previousValue = this._AggManufacter.Entity;
				if (((previousValue != value) 
							|| (this._AggManufacter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AggManufacter.Entity = null;
						previousValue.AggProducts.Remove(this);
					}
					this._AggManufacter.Entity = value;
					if ((value != null))
					{
						value.AggProducts.Add(this);
						this._man_id = value.man_id;
					}
					else
					{
						this._man_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("AggManufacter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AggImages")]
	public partial class AggImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _img_id;
		
		private System.Data.Linq.Binary _img_large;
		
		private System.Data.Linq.Binary _img_medium;
		
		private System.Data.Linq.Binary _img_small;
		
		private EntitySet<AggProduct> _AggProducts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onimg_idChanging(int value);
    partial void Onimg_idChanged();
    partial void Onimg_largeChanging(System.Data.Linq.Binary value);
    partial void Onimg_largeChanged();
    partial void Onimg_mediumChanging(System.Data.Linq.Binary value);
    partial void Onimg_mediumChanged();
    partial void Onimg_smallChanging(System.Data.Linq.Binary value);
    partial void Onimg_smallChanged();
    #endregion
		
		public AggImage()
		{
			this._AggProducts = new EntitySet<AggProduct>(new Action<AggProduct>(this.attach_AggProducts), new Action<AggProduct>(this.detach_AggProducts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_img_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int img_id
		{
			get
			{
				return this._img_id;
			}
			set
			{
				if ((this._img_id != value))
				{
					this.Onimg_idChanging(value);
					this.SendPropertyChanging();
					this._img_id = value;
					this.SendPropertyChanged("img_id");
					this.Onimg_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_img_large", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary img_large
		{
			get
			{
				return this._img_large;
			}
			set
			{
				if ((this._img_large != value))
				{
					this.Onimg_largeChanging(value);
					this.SendPropertyChanging();
					this._img_large = value;
					this.SendPropertyChanged("img_large");
					this.Onimg_largeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_img_medium", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary img_medium
		{
			get
			{
				return this._img_medium;
			}
			set
			{
				if ((this._img_medium != value))
				{
					this.Onimg_mediumChanging(value);
					this.SendPropertyChanging();
					this._img_medium = value;
					this.SendPropertyChanged("img_medium");
					this.Onimg_mediumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_img_small", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary img_small
		{
			get
			{
				return this._img_small;
			}
			set
			{
				if ((this._img_small != value))
				{
					this.Onimg_smallChanging(value);
					this.SendPropertyChanging();
					this._img_small = value;
					this.SendPropertyChanged("img_small");
					this.Onimg_smallChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AggImage_AggProduct", Storage="_AggProducts", ThisKey="img_id", OtherKey="img_id")]
		public EntitySet<AggProduct> AggProducts
		{
			get
			{
				return this._AggProducts;
			}
			set
			{
				this._AggProducts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AggProducts(AggProduct entity)
		{
			this.SendPropertyChanging();
			entity.AggImage = this;
		}
		
		private void detach_AggProducts(AggProduct entity)
		{
			this.SendPropertyChanging();
			entity.AggImage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AggManufacters")]
	public partial class AggManufacter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _man_id;
		
		private string _man_name;
		
		private EntitySet<AggProduct> _AggProducts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onman_idChanging(int value);
    partial void Onman_idChanged();
    partial void Onman_nameChanging(string value);
    partial void Onman_nameChanged();
    #endregion
		
		public AggManufacter()
		{
			this._AggProducts = new EntitySet<AggProduct>(new Action<AggProduct>(this.attach_AggProducts), new Action<AggProduct>(this.detach_AggProducts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_man_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int man_id
		{
			get
			{
				return this._man_id;
			}
			set
			{
				if ((this._man_id != value))
				{
					this.Onman_idChanging(value);
					this.SendPropertyChanging();
					this._man_id = value;
					this.SendPropertyChanged("man_id");
					this.Onman_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_man_name", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string man_name
		{
			get
			{
				return this._man_name;
			}
			set
			{
				if ((this._man_name != value))
				{
					this.Onman_nameChanging(value);
					this.SendPropertyChanging();
					this._man_name = value;
					this.SendPropertyChanged("man_name");
					this.Onman_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AggManufacter_AggProduct", Storage="_AggProducts", ThisKey="man_id", OtherKey="man_id")]
		public EntitySet<AggProduct> AggProducts
		{
			get
			{
				return this._AggProducts;
			}
			set
			{
				this._AggProducts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AggProducts(AggProduct entity)
		{
			this.SendPropertyChanging();
			entity.AggManufacter = this;
		}
		
		private void detach_AggProducts(AggProduct entity)
		{
			this.SendPropertyChanging();
			entity.AggManufacter = null;
		}
	}
}
#pragma warning restore 1591
